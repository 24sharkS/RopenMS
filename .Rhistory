a <- ropenms$Peak1D
a
a
class(a)
typeof(a)
py_help(ropenms$MSSpectrum)
py_help(ropenms$FeatureFinder)
py_help(ropenms$MSExperiment)
py_help(ropenms$MSExperiment)
py_help(ropenms$MSSpectrum)
py_help(ropenms$FeatureFinder)
id = IdXMLFile$new()
class(id)
class(id)[1]
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
cls
devtools::document()
MSExperiment <- R6::R6Class("MSExperiment",
private = list(
py_obj = ropenms$MSExperiment()
),
public = list(
#' Get Spectrum Levels.
#'
#' @return list of spectrum levels.
#' @export
#'
getMSLevels = function(){
private$py_obj$getMSLevels()
},
#' Get number of Spectrums
#'
#' @return total number of spectrums.
#' @export
#'
getNrSpectra = function(){
private$py_obj$getNrSpectra()
},
#' Get list of Spectrums.
#'
#' @return list of spectrums.
#' @export
#'
getSpectra = function(){
private$py_obj$getSpectra()
},
#' Get a specific Spectrum.
#'
#' @param id spectrum number.
#'
#' @return spectrum.
#' @export
#'
getSpectrum = function(id){
mssp <- MSSpectrum$new()
mssp$set_py_obj(private$py_obj$getSpectrum(id-1))
return(mssp)
},
#' Set the spectrums for experiment.
#'
#' @param spectra list of MSSpectrum objects.
#' @export
#'
setSpectra = function(spectra){
new_spectra <- lapply(spectra, function(x) x$get_py_obj())
private$py_obj$setSpectra(new_spectra)
},
#' Get total Experiments.
#'
#' @return total number of experiments.
#' @export
#'
size = function(){
private$py_obj$size()
},
set_py_obj = function(Py_obj){
private$py_obj <- Py_obj
},
get_py_obj = function(){
return(private$py_obj)
}
)
)
ms <- MSExperiment$new()
ms
MSSpectrum$private_fields
class(MSSpectrum$private_fields)
a <- MSSpectrum$private_fields[1]
a
devtools::document()
id
IdXMLFile$private_fields
id$private_fields
py_help(ropenms$MSSpectrum)
cls
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
loadedNamespaces("loadpkg")
loadedNamespaces("ropenms")
loadedNamespaces()
loadNamespaces()
loadNamespaces()
loadNamespace("ropenms")
loadNamespace(".")
loadNamespace()
devtools::check()
devtools::check()
devtools::check()
ropenms = import("pyopenms")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
ropenms = import("pyopenms")
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
devtools::check()
devtools::check(error_on = TRUE)
devtools::check(error_on)
devtools::check(document = TRUE)
ropenms = import("pyopenms")
library(reticulate)
devtools::check(document = TRUE)
ropenms = import("pyopenms")
devtools::check(document = TRUE)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check(document = TRUE)
loadNamespace('ropenms')
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
ropenms = import("pyopenms")
devtools::check()
devtools::document()
a = 3
ropenms = 3
MzMLFile <- R6::R6Class("MzMLFile",cloneable = FALSE,
private = list(
py_obj = ropenms$MzMLFile()
),
public = list(
#' @description Load details from MzML file.
#'
#' @param filename name of the MzML file.
#' @param exp MSExperiment object.
#' @examples
#' file <- MzMLFile$new()
#' exp <- MSExperiment$new()
#' file_in = "input.mzML"
#' file.load(file_in,exp)
load = function(filename,exp){
private$py_obj$load(filename,exp$get_py_obj())
},
#' @description Store details in MzML file.
#'
#' @param filename name of the MzML file.
#' @param exp MSExperiment object.
#' @examples
#' file <- MzMLFile$new()
#' exp <- MSExperiment$new()
#' file_out = "output.mzML"
#' file.store(file_out,exp)
store = function(filename,exp){
private$py_obj$store(filename,exp$get_py_obj())
}
)
)
devtools::check()
devtools::check()
devtools::check()
ropenms = import("pyopenms")
MSExperiment <- R6::R6Class("MSExperiment",cloneable = FALSE,
private = list(
py_obj = ropenms$MSExperiment()
),
public = list(
#' @description Get Spectrum Levels.
#'
#' @return list of spectrum levels.
getMSLevels = function(){
private$py_obj$getMSLevels()
},
#' @description Get number of Spectrums
#'
#' @return total number of spectrums.
getNrSpectra = function(){
private$py_obj$getNrSpectra()
},
#' @description Get list of Spectrums.
#'
#' @return list of spectrums.
getSpectra = function(){
lapply(private$py_obj$getSpectra(), function(x) MSSpectrum$new()$set_py_obj(x))
},
#' @description Get a specific Spectrum.
#'
#' @param id spectrum number.
#'
#' @return spectrum.
getSpectrum = function(id){
mssp <- MSSpectrum$new()
mssp$set_py_obj(private$py_obj$getSpectrum(id-1))
return(mssp)
},
#' @description Set the spectrums for experiment.
#'
#' @param spectra list of MSSpectrum objects.
setSpectra = function(spectra){
new_spectra <- lapply(spectra, function(x) x$get_py_obj())
private$py_obj$setSpectra(new_spectra)
},
#' @description Get total number of experiments.
#'
#' @return total number of experiments.
size = function(){
private$py_obj$size()
},
#' @description Setter method for wrapped object.
#' @details Sets the underlying python object of MSExperiment.
set_py_obj = function(Py_obj){
private$py_obj <- Py_obj
},
#' @description Getter method for wrapped object.
#' @details Returns the underlying python object of MSExperiment.
get_py_obj = function(){
return(private$py_obj)
}
)
)
MSExperiment$private_fields
devtools::document()
devtools::document()
devtools::document()
devtools::document()
cls
devtools::check()
py_help(ropenms)
py_help(ropenms$IdXMLFile)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
CLS
devtools::check()
devtools::load_all()
id <- IdXMLFile$new()
id
prot = list()
peptides = list()
download.file("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/share/OpenMS/examples/BSA/BSA1_OMSSA.idXML","t.idXML")
id
id$load("t.idXML",protein_ids = prot,peptide_ids = peptides)
mzML = MzMLFile$new()
mzML
download.file("https://github.com/OpenMS/OpenMS/blob/develop/share/OpenMS/examples/BSA/BSA1.mzML","example.mzML")
clear
download.file("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/share/OpenMS/examples/BSA/BSA1.mzML","example.mzML")
msexp = MSExperiment$new()
mzML$load("example.mzML",msexp)
spectra = msexp$getSpectra()
sepctra
spectra
spectra
msexp$setSpectra(spectra)
ropenms = import("pyopenms")
msexp
msexp$set_py_obj(ropenms$MSSpectrum())
print(msexp$set_py_obj(ropenms$MSSpectrum()))
msexp$get_py_obj()
devtools::build()
devtools::load_all()
ms <- MSSpectrum$new()
ms
ll = list(1,2,4,6,8)
lapply(ll, function(x) x*3)
ll
lapply(ll, function(x) return(x*3))
idXML = idXML$IdXMLFile()
idXML = IdXMLFile$new()
pepids = list()
protids = list()
idXML$load("t.idXML",protein_ids = protids,peptide_ids = pepids)
pephits = pepids[[1]]$getHits()
pephits
pepseq = pephits[[1]]$getSequence()
pepseq
class(pepseq)
download.file("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/share/OpenMS/examples/FRACTIONS/BSA1_F1.featureXML","f.featureXML")
featXML = FeatureXMLFile$new()
fmap <- FeatureMap$new()
featXML$load("f.featureXML",fmap)
print(paste("FeatureID:",fmap$getFeature(1)$getUniqueId()))
print(paste("FeatureID:",fmap$getFeature(1)$getMZ()))
print(paste("FeatureID:",fmap$getFeature(2)$getMZ()))
print(paste("FeatureID:",fmap$getFeature(3)$getMZ()))
print(paste("FeatureID:",fmap$getFeature(3)$getUniqueId()))
download.file("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/share/OpenMS/examples/BSA/BSA1.mzML","b.mzML")
mzML = MzMLFile$new()
msexp = MSExperiment$new()
mzML$load("b.mzML",msexp)
spectra = msexp$getSpectra()
spectra
ms1 = sapply(spectra, function(x) x$getMSLevel()==1)
peaks=sapply(spectra[ms1], function(x) cbind(do.call("cbind", x$get_peaks()),x$getRT()))
peaks = do.call("rbind", peaks)
peaks_df = data.frame(peaks)
colnames(peaks_df) = c('MZ','Intensity','RT')
peaks_df
peaks_df
peaks_df$Intensity = log10(peaks_df$Intensity)
ggplot(peaks_df, aes(x=RT, y=MZ) )+geom_point(size=1, aes(colour = Intensity), alpha=0.25) + theme_minimal() + scale_colour_gradient(low = "blue", high = "yellow")
library(ggplot2)
ggplot(peaks_df, aes(x=RT, y=MZ) )+geom_point(size=1, aes(colour = Intensity), alpha=0.25) + theme_minimal() + scale_colour_gradient(low = "blue", high = "yellow")
#ms2
ms2=spectra[!ms1][[1]]$get_peaks()
ms2
peaks_ms2=do.call("cbind", ms2)
peaks_ms2=data.frame(peaks_ms2)
colnames(peaks_ms2)=c("MZ","Intensity")
ggplot(peaks_ms2, aes(x=MZ, y=Intensity)) +
geom_segment( aes(x=MZ, xend=MZ, y=0, yend=Intensity)) +
geom_segment( aes(x=MZ, xend=MZ, y=0, yend=-Intensity)) + # mirror spectrum possibly useful for synthetic peptide spectra comparison
theme_minimal()
spectrum = MSSpectrum$new()
mz = seq(100,2000,-100)
mz = seq(2000,100,-100)
m
z
mz
i = seq(10, 2000, length.out = length(mz))
i
length(mz)
lenght(i)
length(i)
spectrum$set_peaks(list(mz,i))
spectrum$get_peaks()
spectrum
peak_df = do.call("cbind",spectrum$get_peaks())
peak_df
apply(peak_df,1,c)
spectrum$getRT()
spectrum$setRT(123.145)
spectrum$getRT()
msexp
spec <- msexp$getSpectrum(1)
spec <- msexp$getSpectrum(3)
spec <- msexp$getSpectrum(0)
spec <- msexp$getSpectrum(5)
msexp$getNrSpectra()
class(msexp$getNrSpectra())
msexp$getSpectrum(5)
msexp$getSpectrum(1)
ropenms
msexp2 <- ropenms$MSExperiment()
mzMl2 <- ropenms$MzMLFile()
mzMl2$load("b.mzML",msexp2)
msexp2
msexp2$getSpectrum(0)
msexp2$getSpectrum(1)
msexp2$getSpectrum("1")
msexp2$getNrSpectra()
reticulate::repl_python()
from urllib.request import urlretrieve
urlretrieve ("http://proteowizard.sourceforge.net/example_data/tiny.pwiz.1.1.mzML",
"test.mzML")
from pyopenms import *
inp = MSExperiment()
MzMLFile().load("test.mzML", inp)
inp.getNrSpectra()
inp.getSpectrum(1)
inp.getSpectrum(0)
inp.getSpectrum(1-1)
inp.getSpectrum(1-1) == inp.getSpectrum(0)
exit()
exit
mexp
msexp
r_to_py(2)
r_to_py(1)
r_to_py(as.integer(1))
21212312
class(213213123)
typeof(21312321)
typeof(1)
msexp$size()
msexp$size() == msexp$getNrSpectra()
r_to_py(as.numeric(1))
r_to_py(as.numeric(1.123))
r_to_py(as.integer(1.123))
r_to_py(1.123)
class(r_to_py(1.123))
class(r_to_py(1))
class(1)
class(as.integer(1))
head(spectrum)
spectrum
prot
pep
pepids
head(pepids)
head(pepids,1)
head(pepids,3)
m <- MSSpectrum$new()
m$set_py_obj(pepids[[1]])
m
pepids[[1]] <- m
head(pepids,1)
MSSpectrum$new()
MSSpectrum$new()$set_py_obj(pepids[[2]])
ll = list(1,2,3)
ll
ll
lapply(ll, function(x) x<-2*x)
ll
ll <- lapply(ll, function(x) x<-2*x)
ll
ll
append(ll,3)
lll
ll
l1 = list(1)
append(l1,l1*2)
y <- MSSpectrum$new()$set_py_obj(pepids[[2]])
y
devtools::load_all()
mzML = MzMLFile$new()
msexp = MSExperiment$new()
mzML$load("b.mzML",msexp)
spectra = msexp$getSpectra()
head(spectra,2)
ms1=sapply(spectra, function(x) x$getMSLevel()==1)
peaks=sapply(spectra[ms1], function(x) cbind(do.call("cbind", x$get_peaks()),x$getRT()))
peaks=do.call("rbind", peaks)
peaks_df=data.frame(peaks)
colnames(peaks_df)=c('MZ','Intensity','RT')
peaks_df$Intensity=log10(peaks_df$Intensity)
ggplot(peaks_df, aes(x=RT, y=MZ) )+geom_point(size=1, aes(colour = Intensity), alpha=0.25) + theme_minimal() + scale_colour_gradient(low = "blue", high = "yellow")
peaks_df
ggplot(peaks_df, aes(x=RT, y=MZ) )+geom_point(size=1, aes(colour = Intensity), alpha=0.25) + theme_minimal() + scale_colour_gradient(low = "blue", high = "yellow")
msexp$getSpectrum(1)
peak_df = do.call("cbind", spectrum$get_peaks())
peaks_df
peak_df
cls
reticulate::conda_list(conda = "auto")
help(reticulate::conda_python)
?reticulate::conda_python
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
reticulate::py_available()
!reticulate::py_available()
if(!reticulate::py_available()){}
if(!reticulate::py_available()){
print("Yes")
}
if(reticulate::py_available()){
print("NO")
}
library(ropenms)
onLoad
source('C:/Users/nkshe/Desktop/ropenms/R/global.R')
library(ropenms)
reticulate::py_available()
reticulate::py_available() == "TRUE"
!reticulate::py_available()
!reticulate::py_module_available("pyopenms")
?Feature
detach("package:ropenms", unload = TRUE)
library(ropenms)
detach("package:ggplot2", unload = TRUE)
library(ropenms)
library(ropenms)
library(ggplot2)
devtools::document()
library(ropenms)
library(ropenms)
