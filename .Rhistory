library(devtools)
use_travis()
use_appveyor()
Sys.info()['sysname']
file.path("~","Desktop","prob3.py")
setwd("~/Desktop")
setwd(file.path("~","Desktop","prob3.py"))
getwd()
file.path("~","Desktop","prob.py")
file.path("~","Desktop","asdsad")
path.expand("~")
path.expand(file.path("~","Desktop"))
path.expand(file.path("~","Desktop","prob.py"))
normalizePath(".")
normalizePath(".","R")
normalizePath(file.path(".","R"))
normalizePath(file.path("..","R"))
normalizePath(file.path("..","R"))
normalizePath(file.path(".."))
normalizePath(file.path("."))
setwd(normalizePath(file.path("..")))
getwd
getwd()
a <- normalizePath(file.path("~","Desktop"))
file.path("~")
normalizePath(file.path("~","Desktop"))
normalizePath(file.path("~"))
normalizePath(file.path("~",".."))
normalizePath(file.path("~","..","Desktop"))
end <- normalizePath(file.path("~","..","Desktop"))
dirname(dirname(end))
dirname(end)
basename(end)
file.create(file.path("~","..","Desktop","abc.txt"))
normalizePath("~")
.Platform$OS.type
.Machine$double.eps
1 + .Machine$double.eps != 1
exit
q()
library(devtools)
IdXMLFile <- R6::R6Class("IdXMLFile",
private = list(
py_obj = ropenms$IdXMLFile()
),
public = list(
load = function(filename,protein_ids,peptide_ids){
prot = r_to_py(protein_ids)
pep = r_to_py(peptide_ids)
private$py_obj$load(filename,prot,pep)
eval.parent(substitute(protein_ids<-py_to_r(prot)))
eval.parent(substitute(peptide_ids<-py_to_r(pep)))
},
store = function(filename,protein_ids,peptide_ids){
private$py_obj$load(filename,protein_ids,peptide_ids)
}
)
)
library(reticulate)
# superassignment to update global reference to ropenms
ropenms <<- reticulate::import("pyopenms", delay_load = TRUE)
IdXMLFile <- R6::R6Class("IdXMLFile",
private = list(
py_obj = ropenms$IdXMLFile()
),
public = list(
load = function(filename,protein_ids,peptide_ids){
prot = r_to_py(protein_ids)
pep = r_to_py(peptide_ids)
private$py_obj$load(filename,prot,pep)
eval.parent(substitute(protein_ids<-py_to_r(prot)))
eval.parent(substitute(peptide_ids<-py_to_r(pep)))
},
store = function(filename,protein_ids,peptide_ids){
private$py_obj$load(filename,protein_ids,peptide_ids)
}
)
)
id = IdXMLFile$class
id
id = IdXMLFile$class()
id = IdXMLFile$get_inherit()
id
id = IdXMLFile$new()
id
py_help(ropenms$IdXMLFile)
id
download.file("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/share/OpenMS/examples/BSA/BSA1_OMSSA.idXML","t.idXML")
load = function(filename,protein_ids,peptide_ids){
prot = r_to_py(protein_ids)
pep = r_to_py(peptide_ids)
private$py_obj$load(filename,prot,pep)
eval.parent(substitute(protein_ids<-py_to_r(prot)))
eval.parent(substitute(peptide_ids<-py_to_r(pep)))
},
load = function(filename,protein_ids,peptide_ids){
prot = r_to_py(protein_ids)
pep = r_to_py(peptide_ids)
private$py_obj$load(filename,prot,pep)
eval.parent(substitute(protein_ids<-py_to_r(prot)))
eval.parent(substitute(peptide_ids<-py_to_r(pep)))
}
prot = list()
pep = list()
load("t.idXML",prot,pep)
py_help(ropenms$MzMLFile)
py_help(ropenms$LogType)
py_help(ropenms$LogType)
py_help(ropenms$PeakFileOptions)
py_help(ropenms$MSSpectrum)
py_help(ropenms$MSExperiment)
py_help(ropenms$FeatureXMLFile)
py_help(ropenms$FeatureMap)
download.file("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/share/OpenMS/examples/FRACTIONS/BSA1_F1.featureXML","a.featureXML")
featXML = ropenms$FeatureXMLFile()
fmap = ropenms$FeatureMap()
fmap
len(fmap)
py_help(ropenms$MSExperiment)
py_help(ropenms$FeatureMap)
py_help(ropenms$Feature)
function(x){
t <- x
t <- t+10
eval.parent(substitute(x,t))
}
a = 3
function(a)
}
y = function(x){
t <- x
t <- t+10
eval.parent(substitute(x,t))
}
a ,- 3
a <- 3
y(3)
y(3)
y = function(x){
t <- x
t <- t + 10
x
}
y(3)
py_help(ropenms$MSSpectrum)
py_help(ropenms$Spectrum)
py_help(ropenms$MSExperiment)
py_help(ropenms$MSSpectrum)
py_help(ropenms$Peak1D)
py_help(ropenms$Peak2D)
a <- class(ropenms$Peak1D)
a
a
a
a <- ropenms$Peak1D
a
a
class(a)
typeof(a)
py_help(ropenms$MSSpectrum)
py_help(ropenms$FeatureFinder)
py_help(ropenms$MSExperiment)
py_help(ropenms$MSExperiment)
py_help(ropenms$MSSpectrum)
py_help(ropenms$FeatureFinder)
id = IdXMLFile$new()
class(id)
class(id)[1]
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
cls
devtools::document()
MSExperiment <- R6::R6Class("MSExperiment",
private = list(
py_obj = ropenms$MSExperiment()
),
public = list(
#' Get Spectrum Levels.
#'
#' @return list of spectrum levels.
#' @export
#'
getMSLevels = function(){
private$py_obj$getMSLevels()
},
#' Get number of Spectrums
#'
#' @return total number of spectrums.
#' @export
#'
getNrSpectra = function(){
private$py_obj$getNrSpectra()
},
#' Get list of Spectrums.
#'
#' @return list of spectrums.
#' @export
#'
getSpectra = function(){
private$py_obj$getSpectra()
},
#' Get a specific Spectrum.
#'
#' @param id spectrum number.
#'
#' @return spectrum.
#' @export
#'
getSpectrum = function(id){
mssp <- MSSpectrum$new()
mssp$set_py_obj(private$py_obj$getSpectrum(id-1))
return(mssp)
},
#' Set the spectrums for experiment.
#'
#' @param spectra list of MSSpectrum objects.
#' @export
#'
setSpectra = function(spectra){
new_spectra <- lapply(spectra, function(x) x$get_py_obj())
private$py_obj$setSpectra(new_spectra)
},
#' Get total Experiments.
#'
#' @return total number of experiments.
#' @export
#'
size = function(){
private$py_obj$size()
},
set_py_obj = function(Py_obj){
private$py_obj <- Py_obj
},
get_py_obj = function(){
return(private$py_obj)
}
)
)
ms <- MSExperiment$new()
ms
MSSpectrum$private_fields
class(MSSpectrum$private_fields)
a <- MSSpectrum$private_fields[1]
a
devtools::document()
id
IdXMLFile$private_fields
id$private_fields
py_help(ropenms$MSSpectrum)
cls
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
loadedNamespaces("loadpkg")
loadedNamespaces("ropenms")
loadedNamespaces()
loadNamespaces()
loadNamespaces()
loadNamespace("ropenms")
loadNamespace(".")
loadNamespace()
devtools::check()
devtools::check()
devtools::check()
ropenms = import("pyopenms")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
ropenms = import("pyopenms")
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
devtools::check()
devtools::check(error_on = TRUE)
devtools::check(error_on)
devtools::check(document = TRUE)
ropenms = import("pyopenms")
library(reticulate)
devtools::check(document = TRUE)
ropenms = import("pyopenms")
devtools::check(document = TRUE)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check(document = TRUE)
loadNamespace('ropenms')
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
ropenms = import("pyopenms")
devtools::check()
devtools::document()
a = 3
ropenms = 3
MzMLFile <- R6::R6Class("MzMLFile",cloneable = FALSE,
private = list(
py_obj = ropenms$MzMLFile()
),
public = list(
#' @description Load details from MzML file.
#'
#' @param filename name of the MzML file.
#' @param exp MSExperiment object.
#' @examples
#' file <- MzMLFile$new()
#' exp <- MSExperiment$new()
#' file_in = "input.mzML"
#' file.load(file_in,exp)
load = function(filename,exp){
private$py_obj$load(filename,exp$get_py_obj())
},
#' @description Store details in MzML file.
#'
#' @param filename name of the MzML file.
#' @param exp MSExperiment object.
#' @examples
#' file <- MzMLFile$new()
#' exp <- MSExperiment$new()
#' file_out = "output.mzML"
#' file.store(file_out,exp)
store = function(filename,exp){
private$py_obj$store(filename,exp$get_py_obj())
}
)
)
devtools::check()
devtools::check()
devtools::check()
ropenms = import("pyopenms")
MSExperiment <- R6::R6Class("MSExperiment",cloneable = FALSE,
private = list(
py_obj = ropenms$MSExperiment()
),
public = list(
#' @description Get Spectrum Levels.
#'
#' @return list of spectrum levels.
getMSLevels = function(){
private$py_obj$getMSLevels()
},
#' @description Get number of Spectrums
#'
#' @return total number of spectrums.
getNrSpectra = function(){
private$py_obj$getNrSpectra()
},
#' @description Get list of Spectrums.
#'
#' @return list of spectrums.
getSpectra = function(){
lapply(private$py_obj$getSpectra(), function(x) MSSpectrum$new()$set_py_obj(x))
},
#' @description Get a specific Spectrum.
#'
#' @param id spectrum number.
#'
#' @return spectrum.
getSpectrum = function(id){
mssp <- MSSpectrum$new()
mssp$set_py_obj(private$py_obj$getSpectrum(id-1))
return(mssp)
},
#' @description Set the spectrums for experiment.
#'
#' @param spectra list of MSSpectrum objects.
setSpectra = function(spectra){
new_spectra <- lapply(spectra, function(x) x$get_py_obj())
private$py_obj$setSpectra(new_spectra)
},
#' @description Get total number of experiments.
#'
#' @return total number of experiments.
size = function(){
private$py_obj$size()
},
#' @description Setter method for wrapped object.
#' @details Sets the underlying python object of MSExperiment.
set_py_obj = function(Py_obj){
private$py_obj <- Py_obj
},
#' @description Getter method for wrapped object.
#' @details Returns the underlying python object of MSExperiment.
get_py_obj = function(){
return(private$py_obj)
}
)
)
MSExperiment$private_fields
devtools::document()
devtools::document()
devtools::document()
devtools::document()
cls
devtools::check()
py_help(ropenms)
py_help(ropenms$IdXMLFile)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
CLS
devtools::check()
devtools::load_all()
id <- IdXMLFile$new()
id
prot = list()
peptides = list()
download.file("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/share/OpenMS/examples/BSA/BSA1_OMSSA.idXML","t.idXML")
id
id$load("t.idXML",protein_ids = prot,peptide_ids = peptides)
mzML = MzMLFile$new()
mzML
download.file("https://github.com/OpenMS/OpenMS/blob/develop/share/OpenMS/examples/BSA/BSA1.mzML","example.mzML")
clear
download.file("https://raw.githubusercontent.com/OpenMS/OpenMS/develop/share/OpenMS/examples/BSA/BSA1.mzML","example.mzML")
msexp = MSExperiment$new()
mzML$load("example.mzML",msexp)
spectra = msexp$getSpectra()
sepctra
spectra
spectra
msexp$setSpectra(spectra)
ropenms = import("pyopenms")
msexp
msexp$set_py_obj(ropenms$MSSpectrum())
print(msexp$set_py_obj(ropenms$MSSpectrum()))
msexp$get_py_obj()
devtools::build()
